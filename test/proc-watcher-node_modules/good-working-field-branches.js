'use strict';

var fs = require('fs');
var path = require('path');
var setTimeout = require('timers').setTimeout;
var clearTimeout = require('timers').clearTimeout;

var PROBE_INTERVAL = 25;

module.exports = ProcWatcher;

function ProcWatcher(flamer, pid, cmdline) {
    var self = this;

    this.type = 'proc-watcher';
    this.flamer = flamer;
    this.pid = pid;
    this.cmdline = cmdline;
    this.probeInterval = PROBE_INTERVAL;

    this.filePath = path.join(
        '/proc', String(this.pid), 'stat'
    );
    this.nextProbe = 0;
    this.timer = null;

    this.boundOnProbe = boundOnProbe;
    this.boundOnFile = boundOnFile;

    function boundOnProbe() {
        self.onProbe();
    }
    function boundOnFile(err, str) {
        self.onFile(err, str);
    }
}

ProcWatcher.prototype.destroy = destroy;
function destroy() {
    if (this.timer) {
        clearTimeout(this.timer);
    }
}

ProcWatcher.prototype.watch = watch;
function watch() {
    var now = Date.now();
    this.nextProbe = now + this.probeInterval;

    this.timer = setTimeout(this.boundOnProbe, this.probeInterval);
}

ProcWatcher.prototype.onProbe = onProbe;
function onProbe() {
    this.timer = null;
    this.nextProbe = this.nextProbe + this.probeInterval;

    fs.readFile(this.filePath, 'utf8', this.boundOnFile);
}

ProcWatcher.prototype.onFile = onFile;
function onFile(err, text) {
    if (err) {
        this.flamer.handleError(err, this);
        this.scheduleNextProbe();
        return;
    }

    var segments = text.split(' ');

    var procInfo = new ProcInfo(
        this.pid,
        segments[2], // state %c
        segments[13], // utime %lu
        segments[14], // stime %lu
        segments[38], // processor %d
        segments[42] // guest_time %lu
    );
    void procInfo;

    this.scheduleNextProbe();
}

ProcWatcher.prototype.scheduleNextProbe = scheduleNextProbe;
function scheduleNextProbe() {
    if (this.timer) {
        return;
    }

    var now = Date.now();
    this.timer = setTimeout(this.boundOnProbe, this.nextProbe - now);
}

function ProcInfo(pid, state, utime, stime, processor, guestTime) {
    this.timestamp = Date.now();
    this.pid = pid;
    this.state = state;
    this.utime = parseInt(utime, 10);
    this.stime = parseInt(stime, 10);
    this.ttime = this.utime + this.stime;
    this.processor = parseInt(processor, 10);
    this.guestTime = parseInt(guestTime, 10);
}
