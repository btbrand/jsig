
type JsigType : {}
type JsigAssignment : {
    identifier: String,
    typeExpression: JsigType
}

interface GlobalScope {
    _addOperator(id: String, typeDefn: JsigType) => void,
    _addVar(id: String, typeDefn: JsigType) => void
}

interface HeaderFile {
    getResolvedAssignments: (this: HeaderFile) => Array<JsigAssignment>,

    getToken(name: String) => JsigType
}

type Meta : {
    moduleExportsType: JsigType
}

interface TypeChecker {
    entryFiles: Array<String>,
    errors: Array<Error>,
    globalScope: GlobalScope,

    moduleExportsType: JsigType,
    errorType: JsigType,

    checkProgram() => void,
    loadLanguageIdentifiers() => void,
    preloadDefinitions() => void,
    preloadGlobals() => void,
    getOrCreateMeta(file: String) => Meta,
    getOrCreateHeaderFile(file: String) => HeaderFile
}

type TypeCheckerOpts : {}

TypeChecker : {
    compile: (fileName: String, options: TypeCheckerOpts) => TypeChecker
} & (
    this: TypeChecker, entryFile: String, options: TypeCheckerOpts
) => void
