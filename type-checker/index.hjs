import { JsigType, JsigProgram } from "../ast/index.hjs"
import { HeaderFile } from "./header-file.hjs"

type JSNode : {
    loc: {
        start: {
            line: Number
        },
        end: {
            line: Number
        }
    }
}

interface GlobalScope {
    _addOperator(id: String, typeDefn: JsigType) => void,
    _addVar(id: String, typeDefn: JsigType) => void,
    _addVirtualType(id: String, typeDefn: JsigType) => void
}

type Meta : {
    moduleExportsType: JsigType
}

interface TypeChecker {
    entryFiles: Array<String>,
    files: Object<String, String>,
    basedir: String,

    errors: Array<Error>,
    globalScope: GlobalScope,
    headerFiles: Object<String, HeaderFile>,

    moduleExportsType: JsigType,
    errorType: JsigType,

    checkProgram() => void,
    loadLanguageIdentifiers() => void,
    preloadDefinitions() => void,
    preloadGlobals() => void,
    getOrCreateMeta(file: String) => Meta,
    getOrCreateHeaderFile(
        file: String,
        node?: JSNode,
        importSourceText?: String,
        importFileName?: String
    ) => HeaderFile | null,
    addError(err: Error) => void,
    _createHeaderFile(source: String, fileName: String) => HeaderFile,
    _readAndParseHeaderFile(source: String, fileName: String) => JsigProgram | null
}

type TypeCheckerOpts : {}

TypeChecker : {
    compile: (fileName: String, options: TypeCheckerOpts) => TypeChecker
} & (
    this: TypeChecker, entryFile: String, options: TypeCheckerOpts
) => void
