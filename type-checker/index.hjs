import { JsigType, JsigProgram } from "../ast/index.hjs"
import { HeaderFile } from "./header-file.hjs"
import { JSNode } from "../_types/definitions/esprima.hjs"
import { ProgramMeta } from "./meta.hjs"

interface GlobalScope {
    _addOperator(id: String, typeDefn: JsigType) => void,
    _addVar(id: String, typeDefn: JsigType) => void,
    _addVirtualType(id: String, typeDefn: JsigType) => void
}

interface TypeChecker {
    entryFiles: Array<String>,
    files: Object<String, String>,
    basedir: String,
    metas: Object<String, ProgramMeta>,

    errors: Array<Error>,
    currentMeta: ProgramMeta,
    globalScope: GlobalScope,
    globalsFile: String | null,
    headerFiles: Object<String, HeaderFile>,
    definitionsFolder: String | null,
    definitions: Object<String, {
        type: String,
        defn: JsigType
    }>,

    moduleExportsType: JsigType,
    errorType: JsigType,

    checkProgram() => void,
    loadLanguageIdentifiers() => void,
    preloadDefinitions() => void,
    preloadGlobals() => void,
    getOrCreateMeta(file: String) => ProgramMeta | null,
    getOrCreateHeaderFile(
        file: String,
        node?: JSNode,
        importSourceText?: String,
        importFileName?: String
    ) => HeaderFile | null,
    addError(err: Error) => void,
    _createHeaderFile(
        source: String, fileName: String
    ) => HeaderFile | null,
    _readAndParseHeaderFile(
        source: String, fileName: String
    ) => JsigProgram | null,
    _addDefinition(id: String, typeDefn: JsigType) => {
        type: String,
        defn: JsigType
    }
}

type TypeCheckerOpts : {}

TypeChecker : {
    compile: (fileName: String, options: TypeCheckerOpts) => TypeChecker
} & (
    this: TypeChecker, entryFile: String, options: TypeCheckerOpts
) => void

tryEsprimaParse : (source: String) => (
    [Error & {
        lineNumber: Number,
        description: String,
        index: Number
    }, null] |
    [null, JSNode]
)
