-- vim: set ft=Haskell:
type Error : {
    message: String,
    stack: String,
    name: String,
    ..R
}

type TArray : {
    length: Number,
    push: <T>(this: Array<T>, T) => Number,
    join: <T>(this: Array<T>, sep: String) => String,
    slice: <T>(this: Array<T>, Number, Number) => Array<T>
}

type TString : {
    length: Number,
    split: (this: String, String) => Array<String>,
    replace: (this: String, RegExp, String) => String,
    indexOf: (this: String, String) => Number,
    charAt : (this: String, index: Number) => String,
    toUpperCase: (this: String) => String,
    toString: (this: String) => String
}

type TObject : {
    hasOwnProperty : <K,V>(this: Object<K,V>, key: String) => Boolean
}

type TDate : {
    getTime : (this: Date) => Number,
    toString : (this: Date) => String
}

type TNumber : {
    toFixed : (this: Number, digits?: Number) => String,
    toString : (this: Number) => String
}

type TFunction : {
    call: %InternalFunction%%FnCall,
    apply: %InternalFunction%%FnApply,
    bind: %InternalFunction%%FnBind
}

String : (Number) => String

Boolean : (Boolean | undefined) => Boolean

Error : (this: Error, String) => void

Array : {
    isArray: (%Boolean%%Mixed) => Boolean
} & <T>(this: Array<T>, size: Number) => void

Date : {
    now: () => Number
} & (this: Date) => void

Math : {
    floor: (Number) => Number
}

parseInt : (String, Number) => Number

Object : {
    create: (parent: null) => %Object%%Empty,
    keys: <K, V>(Object<K, V>) => Array<String>
}

JSON : {
    stringify: (%Boolean%%Mixed) => String,
    parse: (String) => %Boolean%%Mixed
}
