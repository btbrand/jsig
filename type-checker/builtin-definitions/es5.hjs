-- vim: set ft=Haskell:
type Error : {
    message: String,
    stack: String,
    name: String,
    ..R
}

    -- every
    -- some
    -- forEach
    -- map
    -- filter : <T>(
    --      this: Array<T>, func: (T) => Boolean
    -- ) => Array<T>,
    -- reduce
    -- reduceRight

type TArray : {
    toString: <T>(this: Array<T>) => String,
    toLocaleString: <T>(this: Array<T>) => String,
    concat: <T>(this: Array<T>, other: Array<T>) => Array<T>,
    join: <T>(this: Array<T>, sep: String) => String,
    pop: <T>(this: Array<T>) => T,
    push: <T>(this: Array<T>, value: T) => Number,
    reverse: <T>(this: Array<T>) => Array<T>,
    shift: <T>(this: Array<T>) => T,
    slice: <T>(this: Array<T>, start?: Number, end?: Number) => Array<T>,
    sort: <T>(this: Array<T>, sortFn?: (T, T) => Number) => void,
    splice: <T>(
        this: Array<T>, start: Number, deleteCount: Number, item?: T
    ) => Array<T>,
    unshift: <T>(this: Array<T>, value: T) => Number,
    indexOf: <T>(this: Array<T>, item: T) => Number,
    lastIndexOf: <T>(this: Array<T>, item: T) => Number,

    filter : <T>(
        this: Array<T>, func: (T) => Boolean
    ) => Array<T>,

    length: Number
}

type TString : {
    length: Number,
    split: (this: String, String) => Array<String>,
    replace: (this: String, regexp: RegExp, other: String) => String,
    indexOf: (this: String, searchStr: String) => Number,
    lastIndexOf : (this: String, searchStr: String) => Number,
    charAt : (this: String, index: Number) => String,
    charCodeAt : (this: String, index: Number) => String,
    toUpperCase: (this: String) => String,
    concat: (this: String, other: String) => String,
    toString: (this: String) => String,
    match : (this: String, regexp: RegExp) => Array<String> | null,
    search : (this: String, regexp: RegExp) => Number,
    slice : (this: String, start: Number, end?: Number) => String,
    substring : (this: String, start: Number, end?: Number) => String,
    toLowerCase : (this: String) => String,
    toUpperCase : (this: String) => String,
    trim : (this: String) => String
}

type TObject : {
    hasOwnProperty : <K,V>(this: Object<K,V>, key: String) => Boolean
}

type TDate : {
    getTime : (this: Date) => Number,
    toString : (this: Date) => String
}

type TNumber : {
    toFixed : (this: Number, digits?: Number) => String,
    toExponential : (this: Number, digits?: Number) => String,
    toPrecision: (this: Number, precision?: Number) => String,
    toString : (this: Number) => String
}

type TFunction : {
    call: %InternalFunction%%FnCall,
    apply: %InternalFunction%%FnApply,
    bind: %InternalFunction%%FnBind,

    toString: (this: Function) => String,
    length: Number
}

type TRegExp : {
    test: (this: RegExp, pattern: String) => Boolean,
    exec: (this: RegExp, pattern: String) => Array<String> | null
}

String : (Number) => String

Boolean : (Boolean | undefined) => Boolean

Error : (this: Error, String) => void

Array : {
    isArray: (Mixed) => Boolean
} & <T>(this: Array<T>, size: Number) => void

Date : {
    now: () => Number,
    parse: (format: String) => Number
} & (this: Date) => void

Math : {
    floor: (Number) => Number,
    sqrt: (Number) => Number,
    round: (Number) => Number,
    random: () => Number,
    pow : (Number, Number) => Number,
    min : (Number, Number) => Number,
    max : (Number, Number) => Number,
    log : (Number) => Number,
    ceil : (Number) => Number,
    abs : (Number) => Number
}

parseInt : (String, Number) => Number

Object : {
    create: %InternalFunction%%ObjectCreate,
    freeze : <T>(T) => T,
    keys: <K, V>(Object<K, V>) => Array<String>
}

JSON : {
    stringify: (Mixed) => String,
    parse: (String) => Mixed
}
